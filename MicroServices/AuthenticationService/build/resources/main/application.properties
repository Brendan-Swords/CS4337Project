# Server port (optional, set to a specific port if needed)
server.port=8080

spring.security.user.name=Test
spring.security.user.password=Test
## Spring Security OAuth2 Client configuration
#spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
#spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
#spring.security.oauth2.client.registration.google.scope=profile, email
#spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
#spring.security.oauth2.client.registration.google.client-name=Google
#
## OAuth2 authorization server URLs
#spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
#spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
#spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
#spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs
#
## Enable debugging for OAuth2 and security logs (optional)
#logging.level.org.springframework.security=DEBUG
#logging.level.org.springframework.web=DEBUG
#
# MySQL Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/bookstore
spring.datasource.username=root
spring.datasource.password=

# JPA Configuration
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
