spring.application.name=authentication-service
spring.main.web-application-type=reactive
spring.main.allow-bean-definition-overriding=true

## Spring Security OAuth2 Client configuration
#spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
#spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
#spring.security.oauth2.client.registration.google.scope=profile, email
#spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
#spring.security.oauth2.client.registration.google.client-name=Google
#
## OAuth2 authorization server URLs
#spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
#spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
#spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
#spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs
#
## Enable debugging for OAuth2 and security logs (optional)
#logging.level.org.springframework.security=DEBUG
#logging.level.org.springframework.web=DEBUG
#
# MySQL Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/bookstore
spring.datasource.username=root
spring.datasource.password=

# JPA Configuration
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# API Gateway Configuration
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.lower-case-service-id=true

spring.cloud.gateway.routes[0].id=publishing-service
spring.cloud.gateway.routes[0].uri=http://publishing-service:8081
spring.cloud.gateway.routes[0].predicates[0]=Path=/publishing/**
spring.cloud.gateway.routes[0].filters[0]=RewritePath=/publishing/(?<remaining>.*), /${remaining}
# Deemed adding a filter is better, so we don't have to request mapping on every service because if the request mapping is different to the path it won't work so just have everything here.

spring.cloud.gateway.routes[1].id=order-service
spring.cloud.gateway.routes[1].uri=http://order-service:8082
spring.cloud.gateway.routes[1].predicates[0]=Path=/orders/**
spring.cloud.gateway.routes[1].filters[0]=RewritePath=/orders/(?<remaining>.*), /${remaining}

logging.level.org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer=ERROR

